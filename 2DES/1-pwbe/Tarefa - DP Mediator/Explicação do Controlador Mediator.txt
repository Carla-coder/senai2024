Mediador (Mediator): No nosso caso, o ChatMediator atua como o mediador central. Ele gerencia a comunicação entre os diferentes componentes do chat, como a lógica de envio de mensagens e a interface do usuário. O mediador isola os componentes uns dos outros, permitindo que eles interajam apenas através dele.
Componentes independentes: Os diferentes componentes do chat (lógica de envio de mensagens e interface do usuário) não estão diretamente acoplados. Em vez disso, eles se comunicam através do mediador. Isso promove a reutilização e a manutenibilidade do código.
Desacoplamento: A lógica de envio de mensagens (sendMessage) não precisa saber detalhes sobre como a interface do usuário é atualizada. Ela simplesmente envia a mensagem para o mediador, que então notifica a interface do usuário para atualizar o chat.
Centralização do controle: O mediador centraliza o controle sobre as interações entre os componentes. Isso facilita a gestão do comportamento do chat e permite introduzir mudanças ou novos recursos com mais facilidade, pois as alterações são feitas apenas no mediador, sem afetar diretamente os outros componentes.
Portanto, este projeto demonstra bem como o design pattern Controlador Mediator pode ser aplicado para facilitar a comunicação entre componentes independentes em um sistema de chat.

Imaginem que estamos construindo um sistema de chat online, onde várias pessoas podem enviar mensagens umas para as outras em tempo real. Para criar esse sistema de forma organizada e eficiente, usamos o design pattern Controlador Mediator.

O que é o Controlador Mediator?O Controlador Mediator é como um "gerente" central que gerencia todas as interações entre os diferentes componentes de um sistema. 
Ele age como um intermediário, facilitando a comunicação entre os componentes, sem que eles precisem saber uns sobre os outros diretamente.
Como aplicamos o Controlador Mediator no nosso projeto de chat?
Mediador (Mediator): Criamos uma parte do código chamada ChatMediator, que é o nosso mediador central. 
Ele é responsável por gerenciar todas as mensagens que são enviadas e recebidas no chat.
Componentes independentes: Temos dois componentes principais no nosso chat: a interface do usuário (UI) e a lógica de envio de mensagens. 
Eles são independentes um do outro e não precisam saber detalhes sobre como o outro funciona.
Desacoplamento: A lógica de envio de mensagens (sendMessage) não precisa se preocupar com a interface do usuário. 
Ela simplesmente envia a mensagem para o mediador (ChatMediator). Da mesma forma, a interface do usuário não precisa se preocupar com a lógica por trás do envio de mensagens.
Centralização do controle: O mediador (ChatMediator) é como o "cérebro" do nosso chat. 
Ele controla todas as interações e decide como as mensagens devem ser tratadas e exibidas na interface do usuário.
Por que usamos o Controlador Mediator no nosso projeto de chat?
Organização: Usar o Controlador Mediator nos ajuda a manter nosso código organizado e fácil de entender. 
Cada componente do chat tem sua responsabilidade clara e não precisa se preocupar com o funcionamento dos outros componentes.
Flexibilidade: Se quisermos adicionar novos recursos ao chat no futuro, podemos fazer isso facilmente no mediador, sem precisar alterar os outros componentes. 
Isso nos dá flexibilidade para expandir e modificar nosso sistema conforme necessário.
Manutenção: O Controlador Mediator torna nosso código mais fácil de manter. Se algo precisar ser corrigido ou alterado, 
geralmente só precisamos fazer isso no mediador, em vez de ter que mexer em vários lugares do código.

Uma situação com muitas interações complexas entre objetos ocorre em sistemas ou aplicativos que envolvem múltiplos componentes ou módulos que precisam se comunicar entre si de maneira eficiente e coordenada. Aqui estão alguns exemplos de situações onde isso pode ocorrer:

Sistemas de Chat ou Mensagens Instantâneas: Em um sistema de chat, vários usuários podem enviar e receber mensagens em tempo real. Cada mensagem pode precisar ser processada, enviada para os destinatários corretos, exibida na interface do usuário e talvez até mesmo ter ações associadas a ela, como notificações ou respostas automáticas.
Sistemas de Interface Gráfica Complexa: Em aplicativos com interfaces gráficas complexas, pode haver muitos elementos interativos, como botões, menus, barras de rolagem, campos de entrada, etc. Esses elementos podem precisar se comunicar entre si para responder a eventos do usuário, atualizar o estado da interface do usuário e coordenar o fluxo de dados.
Jogos Multiplayer Online: Em jogos multiplayer online, há uma grande variedade de interações entre jogadores, personagens, ambientes e objetos do jogo. Os jogadores podem se comunicar uns com os outros, interagir com elementos do jogo, realizar ações que afetam o ambiente do jogo, entre outras coisas.
Aplicações Web Complexas: Em aplicações web complexas, como sistemas de gerenciamento empresarial (ERP), sistemas de comércio eletrônico ou plataformas de mídia social, pode haver muitos componentes interagindo entre si para fornecer funcionalidades complexas aos usuários. Isso pode incluir processamento de pedidos, gerenciamento de inventário, autenticação de usuários, notificações em tempo real, entre outros recursos.
Em todas essas situações, o uso de um design pattern como o Mediator pode ajudar a simplificar e organizar as interações entre os objetos, promovendo um código mais limpo, modular e fácil de manter.


+---------------------+       +-----------------------+       +-------------------+
|     ChatMediator    |       |       ChatUI          |       |      Controller   |
+---------------------+       +-----------------------+       +-------------------+
| - messages: array   |       |                       |       |                   |
+---------------------+       +-----------------------+       +-------------------+
| + sendMessage()     |       |  - chatBox: Element   |       |  sendMessage()    |
| + getMessages()     |       |                       |       +-------------------+
+---------------------+       |  + updateChat()       |
                               +-----------------------+

ChatMediator: É responsável por gerenciar todas as mensagens que são enviadas e recebidas no chat. Ele mantém uma lista de mensagens (messages) e fornece métodos para adicionar mensagens à lista e obter a lista de mensagens. Quando uma mensagem é enviada, o Mediator notifica a UI para atualizar o chat.
ChatUI: É responsável por atualizar a interface do usuário do chat. Ele possui um elemento DOM representando a caixa de chat (chatBox) e fornece um método para atualizar o conteúdo da caixa de chat com as mensagens mais recentes.
Controller: É responsável por lidar com a lógica de envio de mensagens. Quando o usuário envia uma mensagem, o Controller chama o método sendMessage() do Mediator para adicionar a mensagem à lista de mensagens.


Olá, sejam bem vindos ao Chat Papo Reto.
este projeto consiste em uma demonstração de como utilizar o Design Pattern Controlador Mediator.
É apenas um teste para apresentação em Sala de Aula.
Idealização do Projeto Carla Mozena
