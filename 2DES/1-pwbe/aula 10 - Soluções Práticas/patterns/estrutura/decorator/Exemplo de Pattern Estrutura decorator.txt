// Interface Componente
class Cafe {
    preco() {
        return 10;
    }
}

// Decorador abstrato
class CafeDecorator extends Cafe {
    constructor(cafe) {
        super();
        this.cafe = cafe;
    }

    preco() {
        return this.cafe.preco();
    }
}

// Decoradores concretos
class Leite extends CafeDecorator {
    constructor(cafe) {
        super(cafe);
    }

    preco() {
        return this.cafe.preco() + 3;
    }
}

class Chocolate extends CafeDecorator {
    constructor(cafe) {
        super(cafe);
    }

    preco() {
        return this.cafe.preco() + 5;
    }
}

// Exemplo de uso
let meuCafe = new Cafe();
console.log("Café simples:", meuCafe.preco());

meuCafe = new Leite(meuCafe);
console.log("Café com leite:", meuCafe.preco());

meuCafe = new Chocolate(meuCafe);
console.log("Café com leite e chocolate:", meuCafe.preco());

O exemplo fornecido implementa a estrutura do padrão de projeto Decorator. Vou explicar como cada parte do código se relaciona com os conceitos do padrão Decorator:

Classe Componente (Cafe): Esta é a classe base que define a interface para os objetos que serão decorados. No padrão Decorator, é comum ter uma classe base que define a funcionalidade principal.
Classe Decorador (CafeDecorator): Esta é uma classe abstrata que estende a classe Componente e fornece uma implementação base para os decoradores concretos. Ela contém uma referência para um objeto da classe Componente e delega chamadas de método para esse objeto.
Decoradores Concretos (Leite e Chocolate): São subclasses de CafeDecorator que adicionam funcionalidades específicas aos cafés. Eles implementam métodos para modificar o comportamento do café base, adicionando leite, chocolate ou qualquer outra coisa.
Exemplo de Uso: No exemplo de uso, vemos como criar diferentes combinações de cafés decorados. Começamos com um café simples e, em seguida, decoramos esse café com leite e chocolate, respectivamente, para criar combinações diferentes.
Portanto, sim, o exemplo fornecido implementa a estrutura básica do padrão de projeto Decorator em JavaScript. Ele separa a preocupação de modificação do objeto principal ao adicionar funcionalidades adicionais, seguindo o princípio de abertura/fechamento (open/closed principle) e permitindo uma composição flexível de comportamentos.

Testando o codigo no terminal:

Salve o código em um arquivo com extensão .js. Por exemplo, você pode salvar o código em um arquivo chamado decorator_example.js.
Abra um terminal ou prompt de comando e navegue até o diretório onde o arquivo decorator_example.js está localizado.
Execute o arquivo JavaScript usando o Node.js. Para fazer isso, digite o seguinte comando no terminal:
node decorator_example.js

Resposta no terminal:

G:\senai2024\2DES\1-pwbe\aula 10 - Soluções Práticas\patterns\estrutura\decorator>node decorator_example.js
Café simples: 10
Café com leite: 13
Café com leite e chocolate: 18

Testando na web:
Abra seu editor de texto e cole o código JavaScript em um arquivo com extensão .html. Por exemplo, você pode criar um arquivo chamado decorator_example.html.
Dentro do arquivo HTML, inclua uma tag <script> para referenciar o arquivo JavaScript. Por exemplo:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Teste do Padrão Decorator</title>
</head>
<body>
    <script src="decorator_example.js"></script>
</body>
</html>

Salve o arquivo HTML e o arquivo JavaScript no mesmo diretório.
Abra o arquivo HTML em um navegador da web. Você pode fazer isso dando um duplo clique no arquivo HTML ou abrindo-o através do navegador.
Abra o console do navegador (geralmente acessado através das Ferramentas de Desenvolvedor ou pressionando F12) para ver a saída do console onde as informações sobre o café decorado serão exibidas.

Resposta na web (inspecionar - console):

Café simples: 10
decorator_example.js:46 Café com leite: 13
decorator_example.js:49 Café com leite e chocolate: 18
index.html:38 Live reload enabled.

Exemplo do Diagrama de Classes:

+------------------+       +---------------------+
|      Cafe        |       |    CafeDecorator    |
+------------------+       +---------------------+
|                  |       |                     |
+------------------+       +---------------------+
|                  |       | - cafe: Cafe        |
+------------------+       +---------------------+
          |                          |
          |                          |
          |                          |
          |                          |
+------------------+       +---------------------+
|      Leite       |       |      Chocolate      |
+------------------+       +---------------------+


A classe Cafe tem um atributo cafe, que pode ser uma instância de Cafe ou CafeDecorator, permitindo a composição.
As classes Leite e Chocolate, que são decoradores concretos, não possuem atributos adicionais além dos herdados de CafeDecorator.


