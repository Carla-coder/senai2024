Prisma.io aula #11 - 15/05/2024 - Prof. Renye

* Instalando as dependências ( VSC)

1. npm install cors express dotenv

2. Criar o index.js

const express = require('express');
const cors = require('cors');

const app = express();


const router = require('./src/routes');

app.use(cors());
app.use(router);

// app.get('/', (req, res) => {
//   res.send('Hello World!')
// });

app.listen(3000, () => {
  console.log('App exemplo funcionando na porta 3000!')
});

3. npm install nodemon - 'para rodar nodemon'

4. No 'src' criar um 'routes.js'

  const express = require('express');

 const router = express.Router();

 const clientes = require('./controllers/clientes')

 router.get('/', (req, res) => {
    res.send('Hello World!')
  });

  //Clientes
  router.post('/clientes', clientes.create);
  router.get('/clientes', clientes.read);

  module.exports = router;

* Criar a estrutura controllers com clientes.js e telefones.js

* Instalar as dependências do prisma - ver a documentação - database relacional mysql - troca para javascript e instale a dependência npn install prisma --save-dev

* Abrir o php admin ( start o apache) e criar o database no SQL - create database exemplo_prisma e executar

* npx prisma init --datasource-provider mysql

* No .env digite DATABASE_URL="mysql://root:@localhost:3306/exemplo_prisma" ( 3306 é a porta do XAMPP - MYSQL)

* schema.prisma configure: (Prestar atenção as letras maiúsculas e minúsculas nas mesmas palavras EX: VarChar)

  generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Clientes {
  id Int @id @default(autoincrement())
  nome String @db.VarChar(255)
  cpf String @db.VarChar(14) @unique
  email String? @db.VarChar(255) 
  telefones Telefones[]
}

model Telefones {
  id Int @id @default(autoincrement())
  id_cliente Int 
  telefone String @db.VarChar(20) @unique
  cliente Clientes @relation(fields: [id_cliente], references: [id])
}

* npx prisma migrate dev --name init ( este é o comando para aparecer as tabelas no PHP MyAdmin )

* Instalar as extensões no VSC (Prisma e Prisma Inside)

* Instalar as dependências do prisma Client: npm install @prisma/client

* Dentro de clientes.js digite:

const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient()

const create = async (req, res) => {
    const data = req.body;

    const cliente = await prisma.clientes.create({
        data
    })

    res.status(201).json(cliente).end();
}
    
   const read = async (req, res) => {
    const clientes = await prisma.clientes.findMany();

    res.status(200).json(clientes).end();
}


module.exports = {
    create, 
}

*. Abra o Insomnia e Crie a pasta Clientes e no arquivo http, faça o CREATE (post). No Body selecione JSON

{
	"nome":"Fulano de Tal",
	"cpf": "111.111.111.11",
	"email": "fulanodetal@gmail.com"   este é o ID 1
}

{
	"nome":"Beltrano da Cunha",
	"cpf": "111.111.111.12",
	"email": "beltrano@gmail.com"      este é o ID 2
}

*******************************************************************************************
Tutorial de como abrir o Projeto Escola Prisma Pug

1. abra o terminal VSCode e digite npm i
2. abra o xampp e start o MySQL - Apache e clique no admin do MySql para abrir o PhPMyAdmin
3. no terminal digite nodemon
4. no  .env inclua a URL_DATABASE DATABASE_URL="mysql://root@localhost:3306/escola?schema=public&timezone=UTC"
5. exclua o migration e faça um novo, digite npx prisma migrate dev --name init e 'Y'
6. no navegador digite http://localhost:3000 para ter acesso à aplicação.
** para resetar o nodemon digite rs e enter **
** para sair da aplicação digite Ctrl C **

obs: se der erro quando o programa for aberto em outra máquina, delete o migration, 
verifique o .env ( url database ) e digite no terminal npx prisma migrate dev --name init 

obs2: Existe uma sequência para se fazer os cadastros. Primeiro cadastre a turma, segundo cadastre o aluno que é referente a nova turma, 
terceiro cadastre o professor referente a nova turma. Desta maneira o resultado em 'Turmas' quando se abre o modal em 'Detalhes', será mostrado 
todos os dados retornados de alunos cadastrados e professores. Também faça o migration toda vez que fizer uma nova modificação no código.
Eu deletei o migatrion anterior e fiz um novo executando o comando npx prisma migrate dev --name init

Para faze os testes de retorno de dados no terninal, adicione um console.log em turmas.js: console.log(JSON.stringify(turmas, null, 2)); 
Neste exemplo, retorna um json completo: 

 "id": 5, (id da nova turma)
    "nome": "Power BI", (nome do curso)
    "abreviacao": "2DES", (qual turma)
    "alunos": [
      {
        "ra": "RA0347", (RA do aluno)
        "nome": "Jorge Freitas", (nome do aluno)
        "nascimento": "2008-02-10T00:00:00.000Z" (data de nascimento do aluno)
      }
    ],
    "professores": [
      {
        "professor": {
          "nome": "Anderson", (nome do professor)
          "especialidade": "Power BI" (Curso referente ao professor cadastrado)
        }


