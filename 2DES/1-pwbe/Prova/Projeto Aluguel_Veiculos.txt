Connect - MySQL

const mysql = require('mysql');

const con = mysql.createConnection({
    host: "localhost",
    user: "root",
    database: "aluguel_veiculos"
});

module.exports = con;


Controllers
aluguel.js


const con = require('../connect/mysql');

// CRUD - CREATE

const addAlugueis = (req, res) => {
    const { Placa, Reserva, Retirada, Devolucao, Dias, Status, Subtotal, CPF_Cliente } = req.body;
    if (Placa && Reserva && Retirada && Devolucao && Dias && Status && Subtotal && CPF_Cliente) {
        con.query('INSERT INTO Alugueis (Placa, Reserva, Retirada, Devolucao, Dias, Status, Subtotal, CPF_Cliente) VALUES (?, ?, ?, ?, ?, ?, ?, ?)',
            [Placa, Reserva, Retirada, Devolucao, Dias, Status, Subtotal, CPF_Cliente],
            (err, result) => {
                if (err) {
                    console.error('Erro ao adicionar alugueis:', err);
                    res.status(500).json({ error: 'Erro ao adicionar alugueis' });
                } else {
                    const newAlugueis = { Placa, Reserva, Retirada, Devolucao, Dias, Status, Subtotal, CPF_Cliente };
                    res.status(201).json(newAlugueis);
                }
            });
    } else {
        res.status(400).json({ error: 'Por favor, envie todos os campos obrigatórios' });
    }
};


// CRUD - READ

const getAlugueis = (req, res) => {
    con.query('SELECT * FROM Alugueis', (err, result) => {
        if (err) {
            res.status(500).json({ error: 'Erro ao buscar reservas' });
        } else {
            if (result.length > 0) { // Verifica se há pelo menos uma reserva encontrada
                res.status(200).json(result); // Retorna os resultados em formato JSON
            } else {
                res.status(404).json({ error: 'Nenhuma reserva encontrada' }); // Retorna um erro 404 se nenhum resultado for encontrado
            }
        }
    });
}

// CRUD - UPDATE
const updateAlugueis = (req, res) => {
    const { Placa, CPF_Cliente, Reserva, Retirada, Devolucao, Dias, Status, Subtotal } = req.body;

    if (Placa && CPF_Cliente && Reserva && Retirada && Devolucao && Dias && Status && Subtotal) {
        con.query(
            'update Alugueis set Retirada = ?, Devolucao = ?, Dias = ?, Status = ?, Subtotal = ? WHERE Placa = ? AND CPF_Cliente = ? AND Reserva = ?', 
            [Retirada, Devolucao, Dias, Status, Subtotal, Placa, CPF_Cliente, Reserva], 
            (err, result) => {
                if (err) {
                    res.status(500).json({ error: 'Erro ao atualizar Aluguéis' });
                } else {
                    res.status(200).json(req.body);
                }
            }
        );
    } else {
        res.status(400).json({ error: 'Por favor, envie todos os campos obrigatórios' });
    }
}



// CRUD - DELETE

const deleteAlugueis = (req, res) => {    
    const { Placa, CPF_Cliente, Reserva } = req.body;
    
    if (Placa && CPF_Cliente && Reserva) {
        con.query(
            'DELETE FROM Alugueis WHERE Placa = ? AND CPF_Cliente = ? AND Reserva = ?', 
            [Placa, CPF_Cliente, Reserva], 
            (err, result) => {
                if (err) {
                    res.status(500).json({ error: err });
                } else {
                    if (result.affectedRows === 0) {
                        res.status(404).json({ error: 'Reserva não encontrada' });
                    } else {
                        res.status(200).json({ message: 'Reserva removida com sucesso' });
                    }
                }
            }
        );
    } else {
        res.status(400).json({ error: 'Por favor, envie todos os campos obrigatórios' });
    }
}


const getVeiculosReservados = (req, res) => {
    con.query('SELECT * FROM Veiculos WHERE Placa IN (SELECT Placa FROM Alugueis WHERE Status = "reservado")', (err, veiculos) => {
        if (err) {
            res.status(500).json({ error: 'Erro ao buscar veículos reservados' });
        } else {
            res.status(200).json(veiculos);
        }
    });
};

module.exports = {
    addAlugueis,
    getAlugueis,
    updateAlugueis,
    deleteAlugueis,
    getVeiculosReservados
}

Cliente.js

const con = require('../connect/mysql');

// CRUD - CREATE

const addCliente = (req, res) => {
    
    const {CPF_Cliente, Nome_Cliente } = req.body;
    if (CPF_Cliente && Nome_Cliente) {
        con.query('INSERT INTO Clientes (CPF_Cliente, Nome_Cliente) VALUES (?, ?)',
            [CPF_Cliente, Nome_Cliente],
            (err, result) => {
                if (err) {
                    console.error('Erro ao adicionar Cliente:', err);
                    res.status(500).json({ error: 'Erro ao adicionar Cliente' });
                } else {
                    const newCliente = { CPF_Cliente, Nome_Cliente };
                    res.status(201).json(newCliente);
                }
            });
    } else {
        res.status(400).json({ error: 'Por favor, envie todos os campos obrigatórios' });
    }

};

// CRUD - READ

const getCliente = (req, res) => {
    con.query('SELECT * FROM Clientes', (err, result) => {
        if (err) {
            res.status(500).json({ error: 'Erro ao buscar clientes' });
        } else {
            if (result.length === 0) {
                res.status(404).json({ error: 'Nenhum cliente encontrado' });
            } else {
                res.json(result);
            }
        }
    });
}


const updateCliente = (req, res) => {
    // const { CPF_Cliente } = req.params;
    const { Nome_Cliente, CPF_Cliente } = req.body;
    
    if (CPF_Cliente && Nome_Cliente) {
        con.query(
            'UPDATE Clientes SET Nome_Cliente = ? WHERE CPF_Cliente = ?', 
            [Nome_Cliente, CPF_Cliente], 
            (err, result) => {
                if (err) {
                    res.status(500).json({ error: err });
                } else {
                    res.status(200).json({ CPF_Cliente, Nome_Cliente });
                }
            }
        );
    } else {
        res.status(400).json({ error: 'Por favor, envie todos os campos obrigatórios' });
    }
}


const deleteCliente = (req, res) => {
    
    const { CPF_Cliente } = req.body;
    if (CPF_Cliente) {
        con.query('DELETE FROM Clientes WHERE CPF_Cliente = ?', [CPF_Cliente], (err, result) => {
            if (err) {
                res.status(500).json({ error: err });
            } else {
                if (result.affectedRows === 0) {
                    res.status(404).json({ error: 'Cliente não encontrado' });
                } else {
                    res.status(200).json({ message: 'Cliente removido com sucesso' });
                }
            }
        });
    } else {
        res.status(400).json({ error: 'Por favor, forneça o CPF do cliente' });
    }
    
}

module.exports = {
    addCliente,
    getCliente,
    updateCliente,
    deleteCliente
}

telefone.js

const con = require('../connect/mysql');

// CRUD - CREATE

const addTelefone = (req, res) => {
    
    const { CPF_Cliente, Telefone } = req.body;
    if (CPF_Cliente && Telefone) {
        con.query('INSERT INTO Telefones (CPF_Cliente, Telefone) VALUES (?, ?)',
            [CPF_Cliente, Telefone],
            (err, result) => {
                if (err) {
                    console.error('Erro ao adicionar telefone:', err);
                    res.status(500).json({ error: 'Erro ao adicionar telefone' });
                } else {
                    const newPhone = { CPF_Cliente, Telefone };
                    res.status(201).json(newPhone);
                }
            });
    } else {
        res.status(400).json({ error: 'Favor enviar todos os campos obrigatórios' });
    }

};

// CRUD - READ

const getTelefones = (req, res) => {

    con.query('SELECT * FROM Telefones', (err, result) => {
        if (err) {
            res.status(500).json({ error: 'Erro ao listar telefones' });
        } else {
            res.json(result);
        }
    });

}

// CRUD - UPDATE

const updateTelefone = (req, res) => {

    const { CPF_Cliente, Telefone } = req.body;
    if (CPF_Cliente && Telefone) {
        con.query('UPDATE Telefones SET Telefone = ? WHERE CPF_Cliente = ?', 
        [Telefone, CPF_Cliente], 
        (err, result) => {
            if (err) {
                res.status(500).json({ error: err });
            } else {
                res.status(200).json(req.body);
            }
        });
    } else {
        res.status(400).json({ error: 'Por favor, envie todos os campos obrigatórios' });
    }

}

// CRUD - DELETE

const deleteTelefone = (req, res) => {
    
    const {CPF_Cliente } = req.body;
    if (CPF_Cliente) {
        con.query('DELETE FROM Telefones WHERE CPF_Cliente = ?', [CPF_Cliente], (err, result) => {
            if (err) {
                res.status(500).json({ error: err });
            } else {
                if (result.affectedRows === 0) {
                    res.status(404).json({ error: 'Telefone não encontrado' });
                } else {
                    res.status(200).json({ message: 'Telefone removido com sucesso' });
                }
            }
        });
    } else {
        res.status(400).json({ error: 'Por favor, envie todos os campos obrigatórios' });
    }
    
}

module.exports = {
    addTelefone,
    getTelefones,
    updateTelefone,
    deleteTelefone
}

veiculo.js

const con = require('../connect/mysql');

//CRUD - CREATE

const addVeiculo = (req, res) => {
    const { Placa, Modelo, Marca, Tipo, Diaria} = req.body;

    if (Placa && Modelo && Marca && Tipo && Diaria) {
        con.query('insert into Veiculos (Placa, Modelo, Marca, Tipo, Diaria) VALUES (?, ?, ?, ?, ?)',
            [Placa, Modelo, Marca, Tipo, Diaria], (err, result) => {
                if (err) {
                    console.error('Erro ao adicionar Veiculo', err);
                    res.status(500).json({ error: 'Erro ao adicionar Veículo' });

                } else {
                    const newVeiculo = { Placa, Modelo, Marca, Tipo, Diaria };
                    res.status(201).json(newVeiculo);
                }
            });
    } else {
        res.status(400).json({ error: 'Por favor, envie todos os campos obrigatórios' });
    }
};

//CRUD - READ

const getVeiculo = (req, res) => {
    con.query('select * from Veiculos', (err, result) => {
        if (err) {
            res.status(500).json({ error: 'Erro ao listar Veículo' });
        } else {
            res.json(result);
        }
    });
}

//CRUD - UPDATE

const updateVeiculo = (req, res) => {
    const { Placa, Modelo, Marca, Tipo, Diaria } = req.body;
    if (Placa && Modelo && Marca && Tipo && Diaria) {
        con.query('update Veiculos set Modelo =?, Marca =?, Tipo =?, Diaria =? WHERE Placa =?',
            [Modelo, Marca, Tipo, Diaria, Placa], (err, result) => {
                if (err) {
                    res.status(500).json({ error: 'Erro ao atualizar Veículo' });
                } else {
                    res.json(result);
                }
            });
    } else {
        res.status(400).json({ error: 'Por favor, envie todos os campos obrigatórios' });

    }
};

//CRUD - DELETE

const deleteVeiculo = (req, res) => {
const { Placa } = req.body;
if (Placa) {
    con.query('DELETE FROM Veiculos WHERE Placa = ?', [Placa], (err, result) => {
        if (err) {
            res.status(500).json({ error: err });
        } else {
            if (result.affectedRows === 0) {
                res.status(404).json({ error: 'Veículo não encontrado' });
            } else {
                res.status(200).json({ message: 'Veículo removido com sucesso' });
            }
        }
    });
} else {
    res.status(400).json({ error: 'Por favor, envie todos os campos obrigatórios' });
}

}

module.exports = {
    addVeiculo,
    getVeiculo,
    updateVeiculo,
    deleteVeiculo
}

routes.js

const express = require('express');
const routes = express.Router(); 

const Clientes = require('./controllers/cliente');
const Telefones = require('./controllers/telefone');
const Veiculos = require('./controllers/veiculo');
const Alugueis = require('./controllers/aluguel');

routes.get('/', (req, res) => {
    res.json("aluguel_veiculos");
});

// Rotas para clientes
routes.post('/clientes', Clientes.addCliente);
routes.get('/clientes/:cpf', Clientes.getCliente);
routes.put('/clientes/:cpf', Clientes.updateCliente);
routes.delete('/clientes/:cpf', Clientes.deleteCliente);

// Rotas para telefones
routes.post('/telefones', Telefones.addTelefone);
routes.get('/telefones/:cpf', Telefones.getTelefones);
routes.put('/telefones/:cpf', Telefones.updateTelefone);
routes.delete('/telefones/:cpf', Telefones.deleteTelefone);

// Rotas para veículos
routes.post('/veiculos', Veiculos.addVeiculo);
routes.get('/veiculos/:placa', Veiculos.getVeiculo);
routes.put('/veiculos/:placa', Veiculos.updateVeiculo);
routes.delete('/veiculos/:placa', Veiculos.deleteVeiculo);

// Rotas para reserva
routes.post('/alugueis', Alugueis.addAlugueis);
routes.get('/alugueis', Alugueis.getAlugueis);
routes.put('/alugueis/:Placa/:CPF_Cliente/:Reserva', Alugueis.updateAlugueis);
routes.delete('/alugueis/:Placa/:CPF_Cliente/:Reserva', Alugueis.deleteAlugueis);

routes.get('/alugueis/veiculos-reservados', Alugueis.getVeiculosReservados);

module.exports = routes;

server.js

const express = require("express");
const cors = require("cors");

const routes = require("./src/routes");

const app = express();
app.use(cors());
app.use(express.json());
app.use(routes);

app.listen(3000,()=>{
    console.log("Back-end respondendo na porta 3000");
});

script.sql

-- Criação do banco de dados
CREATE DATABASE aluguel_veiculos;

-- Seleção do banco de dados
USE aluguel_veiculos;

-- Criação da tabela de Veículos
CREATE TABLE Veiculos (
    Placa VARCHAR(10) PRIMARY KEY,
    Modelo VARCHAR(50),
    Marca VARCHAR(50),
    Tipo VARCHAR(50),
    Diaria DECIMAL(10,2)
);

-- Inserção dos dados na tabela de Veículos sem repetições
INSERT INTO Veiculos (Placa, Modelo, Marca, Tipo, Diaria) VALUES
('DEA-7981', 'Uno', 'Fiat', 'standart', 100.00),
('CBC-4945', 'Fiorino', 'Fiat', 'utilitario', 120.00),
('BEE-7735', 'Saveiro', 'VW', 'standart', 100.00),
('CBA-4403', 'Sandeiro', 'Renaut', 'standart', 100.00),
('BBC-8504', 'Palio', 'Fiat', 'standart', 100.00),
('BEB-5885', 'Gol', 'VW', 'standart', 100.00),
('EDB-2475', 'Ranger', 'Ford', 'esportivo', 200.00);

-- Criação da tabela de Clientes
CREATE TABLE Clientes (
    CPF_Cliente VARCHAR(15) PRIMARY KEY,
    Nome_Cliente VARCHAR(100)
);

-- Inserção dos dados na tabela de Clientes
INSERT INTO Clientes (CPF_Cliente, Nome_Cliente)
VALUES 
('111.111.111-11', 'Osvaldo Oliveira'),
('222.222.222-22', 'Jaqueline Teixeira'),
('333.333.333-33', 'Keli Matos'),
('444.444.444-44', 'Ursula Souza'),
('555.555.555-55', 'Evandro Silva');

-- Criação da tabela de Telefones
CREATE TABLE Telefones (
    CPF_Cliente VARCHAR(15),
    Telefone VARCHAR(50),
    PRIMARY KEY (CPF_Cliente, Telefone),
    FOREIGN KEY (CPF_Cliente) REFERENCES Clientes(CPF_Cliente)
);

-- Inserção dos dados na tabela de Telefones
INSERT IGNORE INTO Telefones (CPF_Cliente, Telefone)
VALUES 
('111.111.111-11', '19-72077-0521'),
('111.111.111-11', '19-06078-6843'),
('222.222.222-22', '19-23003-4864'),
('333.333.333-33', '19-06486-6449'),
('333.333.333-33', '19-53266-7923'),
('444.444.444-44', '19-64378-2404'),
('555.555.555-55', '19-53315-2734');

-- Criação da tabela de Aluguéis
CREATE TABLE Alugueis (
    Placa VARCHAR(10),
    Reserva DATE,
    Retirada DATE,
    Devolucao DATE,
    Dias INT,
    Status VARCHAR(20),
    Subtotal DECIMAL(10, 2),
    CPF_Cliente VARCHAR(15),
    PRIMARY KEY (Placa, CPF_Cliente, Reserva),
    FOREIGN KEY (Placa) REFERENCES Veiculos(Placa),
    FOREIGN KEY (CPF_Cliente) REFERENCES Clientes(CPF_Cliente)
);
-- Inserção dos dados na tabela de Aluguéis
INSERT IGNORE INTO Alugueis (Placa, Reserva, Retirada, Devolucao, Dias, Status, Subtotal, CPF_Cliente)
VALUES 
('DEA-7981', '2024-01-25', '2024-01-25', '2024-02-04', 10, 'concluido', 1000.00, '111.111.111-11'),
('CBC-4945', '2024-03-13', '2024-03-13', '2024-03-21', 8, 'concluido', 960.00, '222.222.222-22'),
('BEE-7735', '2024-03-29', '2024-03-29', '2024-04-05', 7, 'concluido', 700.00, '333.333.333-33'),
('CBA-4403', '2024-03-14', '2024-03-14', '2024-03-24', 10, 'concluido', 1000.00, '444.444.444-44'),
('BBC-8504', '2024-02-29', '2024-02-29', '2024-03-07', 7, 'concluido', 700.00, '111.111.111-11'),
('BEB-5885', '2024-02-16', '2024-02-16', '2024-03-25', 38, 'concluido', 3800.00, '111.111.111-11'),
('EDB-2475', '2024-02-05', '2024-02-05', '2024-03-10', 34, 'concluido', 6800.00, '111.111.111-11'),
('CBC-4901', '2024-02-25', '2024-02-25', '2024-03-02', 6, 'concluido', 720.00, '444.444.444-44'),
('EDB-2475', '2024-02-15', '2024-02-15', '2024-03-19', 33, 'concluido', 6600.00, '555.555.555-55'),
('DEA-7981', '2024-02-04', '2024-02-04', '2024-03-10', 35, 'concluido', 3500.00, '444.444.444-44'),
('CBA-4403', '2024-02-23', '2024-02-24', '2024-03-30', 35, 'concluido', 3500.00, '333.333.333-33'),
('BBC-8504', '2024-02-27', '2024-02-27', '2024-03-03', 5, 'concluido', 500.00, '444.444.444-44'),
('BEE-7735', '2024-02-29', '2024-02-29', '2024-03-03', 3, 'concluido', 300.00, '555.555.555-55'),
('BEB-5885', '2024-02-02', '2024-02-02', '2024-03-07', 34, 'concluido', 3400.00, '111.111.111-11'),
('EDB-2475', '2024-02-05', '2024-02-05', '2024-03-15', 39, 'concluido', 3900.00, '555.555.555-55'),
('BEE-7735', '2024-02-08', '2024-02-08', '2024-03-15', 36, 'concluido', 3600.00, '333.333.333-33'),
('BBC-8504', '2024-02-11', '2024-02-11', '2024-03-15', 33, 'concluido', 3300.00, '111.111.111-11'),
('CBC-4945', '2024-03-14', '2024-03-14', NULL, 19, 'alugado', 2280.00, '444.444.444-44'),
('EDB-2475', '2024-03-16', '2024-03-17', NULL, 16, 'alugado', 1600.00, '555.555.555-55'),
('EDB-2475', '2024-03-25', '2024-03-25', NULL, 8, 'alugado', 1600.00, '555.555.555-55'),
('CBC-4945', '2024-03-28', '2024-03-28', NULL, 5, 'alugado', 500.00, '444.444.444-44'),
('BEB-5885', '2024-03-23', '2024-03-23', NULL, 10, 'alugado', 1000.00, '333.333.333-33');

-- Verificar as tabelas criadas
SELECT * FROM Veiculos;
SELECT * FROM Clientes;
SELECT * FROM Telefones;
SELECT * FROM Alugueis;

-- Mostra todas as tabelas
-- SHOW TABLES;

-- Descrição das tabelas
DESCRIBE Veiculos;
DESCRIBE Clientes;
DESCRIBE Telefones;
DESCRIBE Alugueis;

-- Adiciona a coluna 'Diaria' à tabela Veiculos
--  ALTER TABLE Veiculos ADD COLUMN Diaria DECIMAL(10, 2);

-- Remove o ID da Tabela Alugueis
 ALTER TABLE Alugueis DROP COLUMN ID;

-- Remover a coluna ID da tabela Telefones
-- ALTER TABLE Telefones DROP COLUMN ID;


